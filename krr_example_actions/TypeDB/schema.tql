# Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# jemoeder

define

id sub attribute, value long;

name sub attribute, value string;

priority_level sub attribute, value long;

existance sub attribute, abstract, value double;
    exists sub existance;
    not_exists sub existance;

time_date sub attribute, abstract, value datetime;
    expiry_date sub time_date;
    perishing_window sub time_date;
    current_date sub time_date;

quantifiable_attribute sub attribute, abstract, value double;
    continuous sub quantifiable_attribute, abstract;
        unit sub continuous, abstract;
            meter sub unit;
            second sub unit;
            meter_per_second sub unit;
        carthesian sub continuous, abstract;
            lin_x sub carthesian;
            lin_y sub carthesian;
            lin_z sub carthesian;
        euler sub continuous, abstract;
            rot_x sub euler;
            rot_y sub euler;
            rot_z sub euler;

at_location sub attribute, value boolean;

price sub attribute, value double;

categorical_attribute sub attribute, abstract, value string; 
    color_name sub categorical_attribute, regex "^(red|orange|yellow|green|blue|purple|pink)$";

capacity sub attribute, abstract, value long;
    max_capacity sub capacity;
    current_capacity sub capacity;



#############################################
################# entities ##################
#############################################

# physical concepts
physical_entity sub entity,
    owns exists, owns not_exists, owns name, owns id;

    ## beings
    being sub physical_entity,
        plays locating:subject,
        plays taking_form:form;
        living_being sub being;
            animal sub living_being;
            human sub living_being;
            plant sub living_being;
        artificial_being sub being;
            robot sub artificial_being;

    ## spaces
    space sub physical_entity,
        plays current_location:location,
        plays destination:location;
        storage_space sub space,
            owns lin_x, owns lin_y, owns lin_z, owns max_capacity, owns current_capacity,
            plays has_waypoint:subject;
            refrigerated_storage sub storage_space;
                refrigerated_table sub refrigerated_storage;
                refrigerated_shelf sub refrigerated_storage;
            normal_storage sub storage_space;
                table sub normal_storage;
                shelf sub normal_storage;
            discount_bin sub storage_space;
            trash sub storage_space;



    ## artifact
    artifact sub physical_entity,
        plays locating:subject;
        ### stationary artifacts, i.e., not moveable
        stationary_artifact sub artifact;
            #### constructions
            construction sub stationary_artifact;
                building sub construction;     
            #### structural parts
            structural_part sub stationary_artifact, 
                plays taking_form:form;
                window sub structural_part;
                slab sub structural_part; 
                wall sub structural_part;
                    fence sub wall;
                    brick_wall sub wall;
                portal sub structural_part;
                    door sub portal;
                    gate sub portal;
                    stairs sub portal;                        
        ### constituent artifact, i.e., moveable
        constituent_artifact sub artifact;        
            furniture sub constituent_artifact;
            toys sub constituent_artifact;
            ## food (for assignment)
            food sub constituent_artifact,
                owns price,
                owns at_location,
                owns priority_level,
                owns expiry_date;
                perishable_food sub food,
                    owns perishing_window;
                    milk sub perishable_food;
                    yogurt sub perishable_food;
                    cheese sub perishable_food;
                    meat sub perishable_food;
                nonperishable_food sub food;
                    hagelslag sub nonperishable_food;
                    tea sub nonperishable_food;
                    coffee sub nonperishable_food;
                    chocolate sub nonperishable_food;

# abstract concepts
abstract_entity sub entity,
    owns name, owns id;

    ## mathematical
    mathematical sub abstract_entity;
        ### point
        point sub mathematical,
            plays link:vertex,
            plays directed_link:start,
            plays directed_link:end,
            plays positioning:to;

            location sub point,
                owns lin_x, owns lin_y, owns lin_z;
                waypoint sub location,
                    plays has_waypoint:waypoint,
                    owns rot_x, owns rot_y, owns rot_z;

    ## mathematical concetps
    measure sub abstract_entity, abstract;
        physical_quantity sub measure, abstract;
            distance sub physical_quantity, owns meter;
                approaching_distance sub distance;
            height sub physical_quantity, owns meter;
            width sub physical_quantity, owns meter;
            length sub physical_quantity, owns meter;       
        abstract_quantity sub measure;

    date sub abstract_entity,
        owns current_date;
###############################################
################### relations #################
###############################################
mathematics sub relation,
    abstract, owns id;
    ## mathematical definitions
    math_definition sub mathematics, abstract;
        ### math definition of a connector being the intersection of two straight lines
        link sub math_definition,
            relates vertex,
            relates line_segment;
            directed_link sub link,
                relates start as vertex,
                relates end as vertex;
        ### definition of a collection
        set sub math_definition,
            relates hull,
            relates element;
    ## mathematical models
        math_model sub mathematics, abstract;
        ### model for mapping of line and structural_parts
        taking_form sub math_model,
            relates form,
            relates concept;
            #### model for mapping of space and polygon
            enclosing sub taking_form,
                relates enclosed as form,
                relates border as concept;
            surrounding sub taking_form,
                relates surrounded as concept,
                relates area as form;
        ### model for a position between points
        positioning sub math_model,
            owns lin_x, owns lin_y, owns lin_z, owns rot_x, owns rot_y, owns rot_z,
            relates from,
            relates to;


# relations that deal with location
    physics sub relation, abstract, owns id;
        locating sub physics,
            relates subject,
            relates location;
            current_location sub locating;
            destination sub locating;

    
    has_waypoint sub relation, owns id,
        relates subject,
        relates waypoint;
    




###############################################
################### rules #####################
###############################################
rule at_destination:
    when {
        $p isa food;
        $s isa storage_space;
        (location: $s, subject: $p) isa current_location;
        (location: $s, subject: $p) isa destination;
    } then {
        $p has at_location true;
    };

rule not_at_destination:
    when {
        $p isa food;
        $s isa storage_space;
        $d isa storage_space;
        not { $s is $d; };
        (location: $s, subject: $p) isa current_location;
        (location: $d, subject: $p) isa destination;
    } then {
        $p has at_location false;
    };

rule expired_to_trash:
    when {
        $p isa food;
        $p has expiry_date $e;
        $today isa date;
        $today has current_date $current_date;
        $e < $current_date;
        $b isa trash;
    } then {
        (location: $b, subject: $p) isa destination;
    };

rule today_discount:
    when {
        $p isa food;
        $p has expiry_date $e;
        $today isa date;
        $today has current_date $current_date;
        $e = $current_date;
        $b isa discount_bin;
    } then {
        (location: $b, subject: $p) isa destination;
    };


rule high_priority:
    when {
        $f isa perishable_food;
        $f has at_location false;
    } then {
        $f has priority_level 0;
    };

rule trash_priority:
    when{
        $f isa food;
        $t isa trash;
        $b isa discount_bin;
        $f has at_location false;
        {(location: $t, subject: $f) isa destination;} or {(location: $b, subject: $f) isa destination;};
    } then {
        $f has priority_level 1;
    };


rule lower_priority:
    when {
        $f isa nonperishable_food;
        $f has at_location false;
    } then {
        $f has priority_level 2;
    };


